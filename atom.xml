<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Moment of Methods]]></title>
  <link href="http://momentofmethods.com/atom.xml" rel="self"/>
  <link href="http://momentofmethods.com/"/>
  <updated>2012-09-19T21:31:40+02:00</updated>
  <id>http://momentofmethods.com/</id>
  <author>
    <name><![CDATA[Miklós Koren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cultivate your tree]]></title>
    <link href="http://momentofmethods.com/blog/2012/09/19/cultivate-your-tree/"/>
    <updated>2012-09-19T17:27:00+02:00</updated>
    <id>http://momentofmethods.com/blog/2012/09/19/cultivate-your-tree</id>
    <content type="html"><![CDATA[<p>The thing I probably hated the most as a Windows user was folder names like <code>C:\Documents and Settings\koren\My Documents\My Dropbox</code>. This was a pain to use even with the small scripts that economists write (such as <a href="http://stata.com/">Stata</a> <code>do</code> files). I understand Microsoft wants me to point and click, but why make it harder to spell my folder names? Compare it to <code>/home/koren/Dropbox</code>.</p>

<p>This is not a minor nuisance, since by effectively prohibiting me to type my folder names, Microsoft made me sloppier in maintaining a nice tree structure. It took me a while to realize that the <a href="http://en.wikipedia.org/wiki/Unix">tried and tested</a> tree structure is, at least currently, the most efficient way of storing and retrieving my documents and other files.</p>

<p><img class="center" src="http://farm1.staticflickr.com/109/294927196_d501c5cf97.jpg"></p>

<p>In Unix-like systems, every file is part of a single tree, starting at <code>/</code>. Trees are great because you can traverse them easily. I almost never have to search for a file. I am quite certain about where to find <code>~/Dropbox/projects/machines/text/slides90.tex</code> or <code>~/Dropbox/courses/trade/lectures/figures/food_trade.pdf</code>. In fact, if you maintain a deep-enough tree structure, you will find each file with at most <code>O(log N)</code> clicks, where <code>N</code> is the number of files.</p>

<p>Also, subtrees let you hold related stuff together. Of course, it is up to you to decide what is related. To me, <code>machines/code</code> and <code>machines/data</code> sound more related than <code>code/machines</code> and <code>code/spillovers</code>. So a typical project folder looks like::</p>

<pre><code>machines
    code
    data
        customs
        wages
    text
        figures
        tables
    literature
</code></pre>

<p>This way it is easy to share a project folder with a coauthor, as codes, text and data all reside there. As I will discuss later this week, one concern is that if you would like to reuse code or data in another project, it makes no sense to keep  replicas in different places.</p>

<p>A few suggestions to grow a healthier tree:</p>

<ol>
<li>Use forward slashes (<code>/</code>) in paths, even on Windows. Windows will not complain, and your Linux/Mac coauthors will thank you.</li>
<li>Use relative paths. For example, from scripts residing in <code>projects/machines/code</code> I can reach data residing in <code>projects/machines/data</code> by simply referring to <code>../data</code>. This way I don&#8217;t need to know where my coauthor has placed her project folder.</li>
<li>Avoid spaces and accents. I&#8217;m all for expressive filenames, but you don&#8217;t want to risk compatibility across platforms. A friend of mine once created an <a href="http://en.wikipedia.org/wiki/ArchiCAD">ArchiCAD</a> file called <code>szőlőfeldolgozó üzem.pln</code> for a class project. His project got almost killed by different version of Windows at school. Underscore_is_perfectly_suitable to replace spaces, although these days dashes-are-more-trendy.</li>
<li>Separate files by topics and function, not by date and author. I have a fairly good idea what <code>projects/machines/code</code> vs <code>projects/machines/data</code> hold, but try guessing what is inside <code>june2012version/adam</code>. Use <a href="http://momentofmethods.com/blog/2012/09/10/dropbox-is-not-enough/">version control</a> for sharing and storing history.</li>
</ol>


<p>Where do you store your project files? How do you organize them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SparkleShare for moving large data]]></title>
    <link href="http://momentofmethods.com/blog/2012/09/15/sparkleshare-for-moving-large-data/"/>
    <updated>2012-09-15T14:16:00+02:00</updated>
    <id>http://momentofmethods.com/blog/2012/09/15/sparkleshare-for-moving-large-data</id>
    <content type="html"><![CDATA[<p>I sometimes have to move large amounts of data. At least large by the standards of an economist turned hacker. For example, the shapefiles and data from the <a href="http://www.census.gov/econ/cbp/">County and ZIP-Code Business Patterns</a> that I use in my paper &#8220;Cattle, Steaks and Restaurants&#8221; take up 2 GB. In my <a href="http://momentofmethods.com/blog/2012/09/10/dropbox-is-not-enough/">previous post</a>, I said that Dropbox is not suitable for storing, synchronizing and sharing data of this size, especially if you are on the wrong side of the Atlantic.</p>

<p>Dropbox <a href="https://www.dropbox.com/help/7/en">stores all our files</a> on Amazon S3 servers in the U.S. Even though Amazon has servers in Ireland, you cannot tell Dropbox to use those. This is going to slow you down if you are in Europe. In addition, some of the data I use are proprietary and I simply cannot put them on a server outside my control.</p>

<p><a href="http://sparkleshare.org/">SparkleShare</a> to the rescue. It is an open source file sharing client, which works much like Dropbox: whenever you add or change files in a special folder, they are uploaded to the server. The beauty of SparkleShare is that it uses Git in the background. All it needs is a Git repository to synchronize with. You can have it on your own server to minimize data travel time and to maximize security.</p>

<p>To give you an idea about the speed gains, I have conducted a simple non-scientific test. To test upload speed, I have synched an 86.3MB binary file from my home computer to the Dropbox/SparkleShare server. My SparkleShare server is hosted by <a href="http://www.webfaction.com/">Webfaction</a> in Amsterdam. In a very scientific manner, I simply measured how long it took until the Dropbox/SparkleShare icon stopped spinning, indicating that file transfer has completed.</p>

<p>To measure download, I got a different, 59.4 MB binary file to the Dropbox/SparkleShare servers. I used web upload for Dropbox and measured the time it took after the file appeared on the server to it becoming available on my computer.
For SparkleShare, just added the file to the Git repository on the server and measured the time it took <code>git pull</code> to complete.</p>

<p>I report the results as minutes per GB, so smaller numbers are better. I rescaled things to GB so that the numbers are more representative of working with large data.</p>

<script type="text/javascript" src="http://momentofmethods.com//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js"> {"dataSourceUrl":"//docs.google.com/spreadsheet/tq?key=0AhJS2rfBAT8JdGhOWWRDaFhlVGI0XzNhZ1E3NmJIVFE&transpose=1&headers=1&range=C12%3AE14&gid=0&pub=1","options":{"titleTextStyle":{"bold":true,"color":"#000","fontSize":16},"vAxes":[{"useFormatFromData":true,"minValue":null,"viewWindowMode":null,"viewWindow":null,"maxValue":null},{"useFormatFromData":true}],"series":{"0":{"color":"#6fa8dc"},"1":{"color":"#e69138"}},"title":"","booleanRole":"certainty","animation":{"duration":0},"domainAxis":{"direction":1},"legend":"top","hAxis":{"useFormatFromData":true,"minValue":null,"viewWindowMode":"pretty","logScale":false,"viewWindow":{"min":null,"max":null},"maxValue":null},"isStacked":false,"width":600,"height":371},"state":{},"view":{},"chartType":"BarChart","chartName":"Chart 1"} </script>


<p>It takes 39 minutes to upload a GB to Dropbox over my cable connection from home. Excruciatingly slow. SparkleShare is about twice as fast. The real difference, however, is between download speeds. While Dropbox took 27 minutes per GB, SparkleShare took less than 2. An order of magnitude faster!</p>

<p>This is why I use SparkleShare (or, with nerdy coauthors, simply Git) to share large datafiles. What solutions do you use for this problem? What is your experience with Dropbox and SparkleShare?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox is not enough]]></title>
    <link href="http://momentofmethods.com/blog/2012/09/10/dropbox-is-not-enough/"/>
    <updated>2012-09-10T15:58:00+02:00</updated>
    <id>http://momentofmethods.com/blog/2012/09/10/dropbox-is-not-enough</id>
    <content type="html"><![CDATA[<p>I love Dropbox. It has saved me from a nervous breakdown several times. I am working directly in my Dropbox folder, and all my computers are automatically in sync. I have not seen a pendrive in ages. I also have <a href="https://www.dropbox.com/help/113/en">Packrat</a> enabled, which came handy several times in recovering a long-lost file. All my coauthors are on Dropbox, and it is our default tool for sharing files. So, if you still do not have a Dropbox account, by all means, sign up now.</p>

<p>There are two aspects, however, where Dropbox falls short. The first is version control. Sure, Packrat keeps all past versions, but good luck finding the right version of your file among 48 revisions. The second is data storage &#8211; somewhere in the jungles of Amazon S3. With large and sensitive datasets you might want to have more control over where you store your data. Let me write about the first of these today.</p>

<p><img src="http://momentofmethods.com/images/posts/packrat.png"></p>

<p>If you are working with others and want to follow <em>who</em> changed <em>what</em>, you need proper version control. The two most popular version control tools I have experience with are <a href="http://subversion.tigris.org">Subversion</a> and <a href="http://git-scm.com/">Git</a>. Both are suitable for storing and sharing past versions of your files with helpful messages attached to them. Both are open source and come with a number of user-friendly clients.</p>

<p><a href="http://www.brandonsavage.net/git-versus-subversion-a-reconsideration/">Some believed</a> that Git is more difficult to learn than Subversion. <em>After</em> you have used Subversion, Git may take some getting used to, because it uses a different concept. However, if you never used either of these, go with Git. It is much easier to adopt.</p>

<p>You should think of Git as a tool to create archeological layers of the past versions of your files and folders. I say archeological layers, because all your past data stays <em>in place</em>, underneath your current version. (In practice, they are stored in a subfolder named <code>.git</code>.) There is no need to set up a server to host your past data. This makes it easier to get started (no funky setup) and faster to save newer and newer versions (no network traffic). The point of version control is to control versions, and Git makes it as easy as possible.</p>

<p><img src="http://momentofmethods.com/images/posts/git-tower.png"></p>

<p>As an example, look at the history of the same file (courtesy of the beautiful Git client for Mac, <a href="http://www.git-tower.com/index.html">Tower</a>). I have attached comments to each version and I can quickly compare what actually changed. It takes some discipline, as I have to explicitly drag-and-drop the files whenever I want to save a new version and I also have to attach a comment. But this is still faster than emailing your coauthor to let them know what changed in the Dropbox folder.</p>

<p>Of course, with Git (as well as Subversion) you can also share your folder with others. I say it as an afterthought because Dropbox already easily takes care of the sharing part. If you keep your <code>.git</code> folder inside your Dropbox folder, then not only the current version, but all past versions are also shared across computers. This is not the official way to do it, because Git and Dropbox may get tangled up, especially if you lose network connection and Dropbox cannot refresh for a long time. For me, it has worked fine. If you want to put your files on a server instead, <a href="https://github.com/">GitHub</a> is a popular choice.</p>

<p>I hope that by now you are excited to try Git. Head over to its official (and free) <a href="http://git-scm.com/book">book</a> to learn how it actually works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I learned from software developers]]></title>
    <link href="http://momentofmethods.com/blog/2012/09/07/what-i-learned-from-software-developers/"/>
    <updated>2012-09-07T17:19:00+02:00</updated>
    <id>http://momentofmethods.com/blog/2012/09/07/what-i-learned-from-software-developers</id>
    <content type="html"><![CDATA[<p>Software developers are like us on many levels. They build abstract models to solve concrete problems. They write lots of code. They work in teams. They love to show off their work to the community.</p>

<p>But first, and foremost, they love to learn new stuff to become better at what they do. The sheer number of <a href="http://en.wikipedia.org/wiki/List_of_programming_languages_by_category">programming languages</a> out there is amazing. So, the real defining fearure of nerds is not that they don&#8217;t have a life. It&#8217;s that they have an insatiable hunger for knowledge and up-to-date skills. Sounds like the way academics like to describe themselves. Nerds are us.</p>

<p>I learned from software developers to never stop developing my craft. Mind you, there is a fine line between learning useful new tools and browsing the web to procrastinate. But if you are still using Word to write your papers, email to send your files, an HTML editor and FTP to update your website, an old EViews to run your regressions, or unwieldy Matlab codes to simulate your model, you should ask yourself whether it&#8217;s because these are the best tools for you (might be) or because you grew lazy to learn something new (more likely).</p>

<p>Software developers have taught me how to</p>

<ul>
<li>collaborate more effectively (use version control),</li>
<li>build useful abstractions (how to think about data),</li>
<li>write better code (optimized for humans, not computers).</li>
</ul>


<p>I will write about each of these in more detail.</p>
]]></content>
  </entry>
  
</feed>

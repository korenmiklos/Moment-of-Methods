<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Moment of Methods]]></title>
  <link href="http://momentofmethods.com/atom.xml" rel="self"/>
  <link href="http://momentofmethods.com/"/>
  <updated>2012-09-10T17:22:31+02:00</updated>
  <id>http://momentofmethods.com/</id>
  <author>
    <name><![CDATA[MiklÃ³s Koren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropbox is not enuogh]]></title>
    <link href="http://momentofmethods.com/blog/2012/09/10/dropbox-is-not-enuogh/"/>
    <updated>2012-09-10T15:58:00+02:00</updated>
    <id>http://momentofmethods.com/blog/2012/09/10/dropbox-is-not-enuogh</id>
    <content type="html"><![CDATA[<p>I love Dropbox. It has saved me from a nervous breakdown several times. I am working directly in my Dropbox folder, and all my computers are automatically in sync. I have not seen a pendrive in ages. I also have <a href="https://www.dropbox.com/help/113/en">Packrat</a> enabled, which came handy several times in recovering a long-lost file. All my coauthors are on Dropbox, and it is our default tool for sharing files. So, if you still do not have a Dropbox account, by all means, sign up now.</p>

<p><img class="left" src="http://momentofmethods.com/images/posts/packrat.png"> There are two aspects, however, where Dropbox falls short. The first is version control. Sure, Packrat keeps all past versions, but good luck finding the right version of your file among 48 revisions. The second is data storage &#8211; somewhere in the jungles of Amazon S3. With large and sensitive datasets you might want to have more control over where you store your data. Let me write about the first of these today.</p>

<p>If you are working with others and want to follow <em>who</em> changed <em>what</em>, you need proper version control. The two most popular version control tools I have experience with are <a href="http://subversion.tigris.org">Subversion</a> and <a href="http://git-scm.com/">Git</a>. Both are suitable for storing and sharing past versions of your files with helpful messages attached to them. Both are open source and come with a number of user-friendly clients.</p>

<p><a href="http://www.brandonsavage.net/git-versus-subversion-a-reconsideration/">Some believed</a> that Git is more difficult to learn than Subversion. <em>After</em> you have used Subversion, Git may take some getting used to, because it uses a different concept. However, if you never used either of these, go with Git. It is much easier to adopt.</p>

<p>You should think of Git as a tool to create archeological layers of the past versions of your files and folders. I say archeological layers, because all your past data stays <em>in place</em>, underneath your current version. (In practice, they are stored in a subfolder named <code>.git</code>.) There is no need to set up a server to host your past data. This makes it easier to get started (no funky setup) and faster to save newer and newer versions (no network traffic). The point of version control is to control versions, and Git makes it as easy as possible.</p>

<p><img class="left" src="http://momentofmethods.com/images/posts/git-tower.png"> As an example, look at the history of the same file (courtesy of the beautiful Git client for Mac, <a href="http://www.git-tower.com/index.html">Tower</a>). I have attached comments to each version and I can quickly compare what actually changed. It takes some discipline, as I have to explicitly drag-and-drop the files whenever I want to save a new version and I also have to attach a comment. But this is still faster than emailing your coauthor to let them know what changed in the Dropbox folder.</p>

<p>Of course, with Git (as well as Subversion) you can also share your folder with others. I say it as an afterthought because Dropbox already easily takes care of the sharing part. If you keep your <code>.git</code> folder inside your Dropbox folder, then not only the current version, but all past versions are also shared across computers. This is not the official way to do it, because Git and Dropbox may get tangled up, especially if you lose network connection and Dropbox cannot refresh for a long time. For me, it has worked fine. If you want to put your files on a server instead, <a href="https://github.com/">GitHub</a> is a popular choice.</p>

<p>I hope that by now you are excited to try Git. Head over to its official (and free) <a href="http://git-scm.com/book">book</a> to learn how it actually works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I learned from software developers]]></title>
    <link href="http://momentofmethods.com/blog/2012/09/07/what-i-learned-from-software-developers/"/>
    <updated>2012-09-07T17:19:00+02:00</updated>
    <id>http://momentofmethods.com/blog/2012/09/07/what-i-learned-from-software-developers</id>
    <content type="html"><![CDATA[<p>Software developers are like us on many levels. They build abstract models to solve concrete problems. They write lots of code. They work in teams. They love to show off their work to the community.</p>

<p>But first, and foremost, they love to learn new stuff to become better at what they do. The sheer number of <a href="http://en.wikipedia.org/wiki/List_of_programming_languages_by_category">programming languages</a> out there is amazing. So, the real defining fearure of nerds is not that they don&#8217;t have a life. It&#8217;s that they have an insatiable hunger for knowledge and up-to-date skills. Sounds like the way academics like to describe themselves. Nerds are us.</p>

<p>I learned from software developers to never stop developing my craft. Mind you, there is a fine line between learning useful new tools and browsing the web to procrastinate. But if you are still using Word to write your papers, email to send your files, an HTML editor and FTP to update your website, an old EViews to run your regressions, or unwieldy Matlab codes to simulate your model, you should ask yourself whether it&#8217;s because these are the best tools for you (might be) or because you grew lazy to learn something new (more likely).</p>

<p>Software developers have taught me how to</p>

<ul>
<li>collaborate more effectively (use version control),</li>
<li>build useful abstractions (how to think about data),</li>
<li>write better code (optimized for humans, not computers).</li>
</ul>


<p>I will write about each of these in more detail.</p>
]]></content>
  </entry>
  
</feed>
